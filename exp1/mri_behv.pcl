#--------------------------------------------------------------
#                          SUB ROUTINE: Record
#--------------------------------------------------------------
string subj = logfile.subject();
int index_count = 0;
string COMMA = ",";
string RETURN = "\n";
string data_file_name = "subj_" + subj + ".csv";
output_file out = new output_file;
out.open("./data/" + data_file_name);
array<string> headings[9];
headings[1] = "subject";
headings[2] = "trial";
headings[3] = "visual_size";
headings[4] = "visual_brightness";
headings[5] = "audio_pitch"; 
headings[6] = "audio_location";
headings[7] = "button";
headings[8] = "RT";
headings[9] = "LeftAnsMark";  # left or right
loop int i = 1 until i > headings.count()
begin
	if i != headings.count() then
		out.print(headings[i] + COMMA);
	elseif i == headings.count() then
		out.print(headings[i]);
	end;
	i = i + 1;
end;
out.print(RETURN);
out.close();
int wrap_count = 0;
sub 
   record(string info)
begin
    out.open_append( "./data/" + data_file_name );
	 wrap_count = wrap_count + 1;
	 if wrap_count%(headings.count()) != 0 then
		out.print(info);
		out.print(COMMA);
	 else
		out.print(info);
		out.print(RETURN);
	 end;
   out.close();
end;
sub 
   record_acc_rt
begin
	stimulus_data last = stimulus_manager.last_stimulus_data();
	if last.type() == stimulus_hit then
		record("Correct");
		record(string(last.reaction_time_double()));
	elseif last.type() == stimulus_incorrect then
		record("Wrong");
		record(string(last.reaction_time_double()));
	else
		record("");
		record("");
	end;
end; 
sub 
   record_button_rt_mark
begin
	#stimulus_data last = stimulus_manager.last_stimulus_data();
	index_count = stimulus_manager.stimulus_count( ); 
	term.print_line(string(index_count));
	stimulus_data last = stimulus_manager.get_stimulus_data( index_count-2 );
	
	record(string(last.button()));
   record(string(last.reaction_time())); 
	if last.type() == stimulus_hit then 
      record("left");
	elseif last.type() == stimulus_incorrect then
      record("right");
	else
		record("");
	end;
end;          
#--------------------------------------------------------------
#                          Present Setup
#--------------------------------------------------------------
# read data using input_file type  
input_file in = new input_file;
in.open( "./seq/seq.txt" );

# in.set_delimiter( '\t' ); # for get_line()
loading_trial.present(); 
int PARA_TOTAL = 4;        # all condition control: vsize,vbrightness,apitch,alocation
int TRIAL_TOTAL = 1500;    # total number of trials
int prac_times = 40;       # practice times
array<int> prac_trial_list[prac_times][PARA_TOTAL];
int ii = 1;
loop int vsize = 1 until vsize > 2
begin
   loop int vbrightness = 1 until vbrightness > 2
   begin       
      loop int apitch = 1 until apitch > 2
      begin
         loop int alocation = 1 until alocation > 5
         begin
            #term.print("visual size = " + string(vsize) + ", visual lightness = " + string(vbrightness) + ", audio pitch = " + string(apitch) + ", audio location = " + string(alocation) + "\n");  
            prac_trial_list[ii][1]=vsize; 
            prac_trial_list[ii][2]=vbrightness;
            prac_trial_list[ii][3]=apitch;
            prac_trial_list[ii][4]=alocation;
            ii = ii + 1;        
            
            alocation = alocation + 1;
         end;
         apitch = apitch + 1;
      end;     
      vbrightness = vbrightness + 1;
   end;
   vsize = vsize + 1; 
end; 
prac_trial_list.shuffle();
# loading formal trial seq list
array<int> trial_list[TRIAL_TOTAL][PARA_TOTAL];
int count = 0;
loop until
   in.end_of_file() || count == 1500 || !in.last_succeeded()
begin
   count = count + 1;
   trial_list[count][1] = in.get_int(); # vsize
   trial_list[count][2] = in.get_int(); # vbrightness
   trial_list[count][3] = in.get_int(); # apitch
   trial_list[count][4] = in.get_int(); # alocation
   #term.print("visual size = " + string(prac_trial_list[count][1]) + ", visual lightness = " + string(prac_trial_list[count][2]) + ", audio pitch = " + string(prac_trial_list[count][3]) + ", audio location = " + string(prac_trial_list[count][4]) + "\n");
end;  
/*
if !in.last_succeeded() then
   term.print( "Error while reading!\n" );
elseif !in.end_of_file() then
   term.print( "Exceeded capacity!\n" );  
   term.print(string(count));
end;
*/
done_trial.present();
#--------------------------------------------------------------
#                          Additional Setup
#--------------------------------------------------------------
int relax_count = 75;
int block_count = 150; # in total 10 blocks
int total_block = 10;

array<int> iti[4] = {500,600,700,800};
# practice related
int prac_relax_count = 10;
int prac_block_count = 20; # in total 2 blocks at practice stage
int prac_total_block = 2;
double ac_limit = 0.80;
int rt_limit = 1000;
int prac_marker = 1; 
#--------------------------------------------------------------
#                          Start PRESENTATION
#-------------------------------------------------------------- 
string text_pc;
string text_rt;
string text_rt_suggest;

if prac_marker == 1 then 
	#--------------------------------------------------------------
	#                          Show Practice Trials
	#--------------------------------------------------------------
	int pvsize = -1;
	int pvbright = -1;
	int papitch = -1;
	int paloc = -1;
	
	double pc_record = 0;
	welcome_text.set_caption("(Press Start button to practice)",true);
	welcome_trial.present();
	loop int god = 1 until god == 0
	begin
		loop int i = 1 until i > prac_trial_list.count()
		begin             
				pvsize = prac_trial_list[i][1];        # 1 = big,2 = small,0 = none
				pvbright = prac_trial_list[i][2];      # 1 = high bright,2 = low bright,0 = none
				papitch = prac_trial_list[i][3];       # 1 = high pitch,2 = low pitch
				paloc = prac_trial_list[i][4];         # 1 = L2 Left 22.5 ,2 = L1 Left 10,3 = Z Central 0; 4 = R 1 Right 10;5 = R2 Right 22.5; 1-5 High Pitch; 6-10 Low Pitch
				#term.print(string(vsize)+string(vbright)+"\n");
				if papitch == 1 then
					if paloc == 1 then
						psnd_event.set_stimulus( snds[1] )
					elseif paloc == 2 then
						psnd_event.set_stimulus( snds[2] )
					elseif paloc == 3 then                
						psnd_event.set_stimulus( snds[3] )
					elseif paloc == 4 then
						psnd_event.set_stimulus( snds[4] )
					elseif paloc == 5 then
						psnd_event.set_stimulus( snds[5] )
					end
				elseif papitch == 2 then
					if paloc == 1 then
						psnd_event.set_stimulus( snds[6] )
					elseif paloc == 2 then
						psnd_event.set_stimulus( snds[7] )
					elseif paloc == 3 then                
						psnd_event.set_stimulus( snds[8] )
					elseif paloc == 4 then
						psnd_event.set_stimulus( snds[9] )
					elseif paloc == 5 then
						psnd_event.set_stimulus( snds[10] )
					end
				end;
				if pvsize == 1 then
					if pvbright == 1 then
						pvis_event.set_stimulus( pics[1] )
					elseif pvbright == 2 then
						pvis_event.set_stimulus( pics[3] )
					elseif pvbright == 0 then                
						pvis_event.set_stimulus( pics[5] )
					end
				elseif pvsize == 2 then
					if pvbright == 1 then
						pvis_event.set_stimulus( pics[2] )
					elseif pvbright == 2 then
						pvis_event.set_stimulus( pics[4] )
					elseif pvbright == 0 then                
						pvis_event.set_stimulus( pics[5] )
					end 
				elseif pvsize == 0 then
					if pvbright == 1 then
						pvis_event.set_stimulus( pics[5] )
					elseif pvbright == 2 then
						pvis_event.set_stimulus( pics[5] )
					elseif pvbright == 0 then                
						pvis_event.set_stimulus( pics[5] )
					end
				end;     
				if paloc == 1 || paloc == 2 then
					psnd_event.set_target_button(1);
				elseif paloc == 5 || paloc == 6 then
					psnd_event.set_target_button(2);
				elseif paloc == 3 then
					psnd_event.set_target_button({1,2});
				end; 		 
				
				pmain_trial.present();
				
				stimulus_data plast = stimulus_manager.get_stimulus_data( stimulus_manager.stimulus_count( )-2 );
				if plast.type() == stimulus_hit then
					text_pc = "Correct";
					acc.set_font_color(0,255,0);
					pc_record = pc_record + 1;
				elseif plast.type() == stimulus_incorrect then
					text_pc = "Wrong";
					acc.set_font_color(255,0,0);	
				end;
				
				text_rt = string(plast.reaction_time());
				if plast.reaction_time() > rt_limit then
					text_rt_suggest = "Too Slow";
				elseif plast.reaction_time() < 100 && plast.reaction_time() != 0  then
					text_rt_suggest = "Too Fast";
				elseif plast.reaction_time() == 0 then
					text_rt_suggest = "missing";
				else
					text_rt_suggest = "Keep It";
				end;
				acc.set_caption(text_pc,true);
				rt.set_caption(text_rt+" msecs",true);
				sug.set_caption(text_rt_suggest,true);
				feed_back_trial.present();
	  
				#interval_trials.set_duration(iti[random(1,4)]);
				#interval_trials.present();  
				
				if mod(i,prac_relax_count) == 0 && mod(i,prac_block_count) != 0 then
					relax_trial.present();
				end;
				if mod(i,prac_block_count) == 0 then
					if int((i-mod(i,prac_block_count))/prac_block_count) < prac_total_block then
						block_info.set_caption("Finished: Part "+ string(int((i-mod(i,prac_block_count))/prac_block_count)) +"/"+string(prac_total_block)+"\nNext      : Part "+ string(int((i-mod(i,prac_block_count))/prac_block_count)+1) +"/"+string(prac_total_block),true);
					else
						block_info.set_caption("Finished: Part "+ string(int((i-mod(i,prac_block_count))/prac_block_count)) +"/"+string(prac_total_block)+"\nNext: Accuracy Check",true);
					end;
					
					block_trial.present();
				end;     
			i=i+1;  
		end;
		pc_record = pc_record/prac_times;
		if pc_record >= ac_limit then
			god = 0;
			tacc.set_caption("Accuracy: "+string(round(pc_record*100,3))+" %",true);
			tsug.set_caption("Enter Formal Test",true);
			summary_trial.present();
		elseif pc_record < ac_limit then
			god = 1;
			tacc.set_caption("Accuracy: "+string(round(pc_record*100,3))+" %",true);
			tsug.set_caption("Redo Practice",true);
			summary_trial.present();
		end;
	end;
	prac_marker = 0;	
end;
if prac_marker == 0 then
	#--------------------------------------------------------------
	#                          Show Formal Trials
	#-------------------------------------------------------------- 
	int vsize = -1;
	int vbright = -1;
	int apitch = -1;
	int aloc = -1;
	welcome_text.set_caption("(Press Start button to formal test)",true);
	welcome_trial.present();
	loop int i = 1 until i > trial_list.count()
	begin
			record(subj);
			record(string(i));                   
			vsize = trial_list[i][1];        # 1 = big,2 = small,0 = none
			vbright = trial_list[i][2];      # 1 = high bright,2 = low bright,0 = none
			apitch = trial_list[i][3];       # 1 = high pitch,2 = low pitch
			aloc = trial_list[i][4];         # 1 = Left 22.5 ,2 = Left 10,3 = Central 0; 4 = Right 10;5 = Right 22.5; 1-5 High Pitch; 6-10 Low Pitch
			#term.print(string(vsize)+string(vbright)+"\n");
			record(string(vsize));
			record(string(vbright));
			record(string(apitch));
			record(string(aloc));
			if apitch == 1 then
				if aloc == 1 then
					snd_event.set_stimulus( snds[1] )
				elseif aloc == 2 then
					snd_event.set_stimulus( snds[2] )
				elseif aloc == 3 then                
					snd_event.set_stimulus( snds[3] )
				elseif aloc == 4 then
					snd_event.set_stimulus( snds[4] )
				elseif aloc == 5 then
					snd_event.set_stimulus( snds[5] )
				end
			elseif apitch == 2 then
				if aloc == 1 then
					snd_event.set_stimulus( snds[6] )
				elseif aloc == 2 then
					snd_event.set_stimulus( snds[7] )
				elseif aloc == 3 then                
					snd_event.set_stimulus( snds[8] )
				elseif aloc == 4 then
					snd_event.set_stimulus( snds[9] )
				elseif aloc == 5 then
					snd_event.set_stimulus( snds[10] )
				end
			end;
			if vsize == 1 then
				if vbright == 1 then
					vis_event.set_stimulus( pics[1] )
				elseif vbright == 2 then
					vis_event.set_stimulus( pics[3] )
				elseif vbright == 0 then                
					vis_event.set_stimulus( pics[5] )
				end
			elseif vsize == 2 then
				if vbright == 1 then
					vis_event.set_stimulus( pics[2] )
				elseif vbright == 2 then
					vis_event.set_stimulus( pics[4] )
				elseif vbright == 0 then                
					vis_event.set_stimulus( pics[5] )
				end 
			elseif vsize == 0 then
				if vbright == 1 then
					vis_event.set_stimulus( pics[5] )
				elseif vbright == 2 then
					vis_event.set_stimulus( pics[5] )
				elseif vbright == 0 then                
					vis_event.set_stimulus( pics[5] )
				end
			end;     
					 
			main_trial.present();
			record_button_rt_mark();
			  
			interval_trials.set_duration(iti[random(1,4)]);
			interval_trials.present();  

			if mod(i,relax_count) == 0 && mod(i,block_count) != 0 then
				relax_trial.present();
			end;
			if mod(i,block_count) == 0 && int((i-mod(i,block_count))/block_count) != total_block then
				block_info.set_caption("Finished: Part "+ string(int((i-mod(i,block_count))/block_count)) +"/"+string(total_block)+"\nNext      : Part "+ string(int((i-mod(i,block_count))/block_count)+1) +"/"+string(total_block),true);
				block_trial.present();
			end;     
		i=i+1;  
	end;
	bye_trial.present();
end;


 


/*
#--------------------------------------------------------------
# print to terminal to see if we got it right
#term.print( column_names[1] + "\t" + column_names[2] + "\t" +
#            column_names[3] + "\t" + column_names[4] + "\n" );
loop
   int i = 1
until
   i > count
begin
   term.print( seq_vsize[i] );
   term.print( "\t" );
   term.print( seq_vbrightness[i] );
   term.print( "\t" );
   term.print( seq_apitch[i] );
   term.print( "\t" );
   term.print( seq_aloc[i] );
   term.print( "\n" );
   i = i + 1
end     
*/             

# trans data to 2D array 

#loop int i = 1 until i > TRIAL_TOTAL
#begin
#   prac_trial_list[][1] = seq_vsize;
#   prac_trial_list[][2] = seq_vbrightness;
#   prac_trial_list[][3] = seq_apitch;
#   prac_trial_list[][4] = seq_aloc;
   # 
#end;

/*
# parameters  
int V_SIZE = 2;
int V_LIGHTNESS = 2;  
int A_PITCH = 2;
int A_LOCATION = 5; 
int REPEATE = 3;

# set up and randomize formal trials    
int ii = 1;
array<int> prac_trial_list[V_SIZE*V_LIGHTNESS*A_PITCH*A_LOCATION*REPEATE][4];
loop int vsize = 1 until vsize > V_SIZE
begin
   loop int vbrightness = 1 until vbrightness > V_LIGHTNESS
   begin       
      loop int apitch = 1 until apitch > A_PITCH
      begin
         loop int alocation = 1 until alocation > A_LOCATION
         begin
            loop int repeate = 1 until repeate > REPEATE
            begin
               term.print("visual size = " + string(vsize) + ", visual lightness = " + string(vbrightness) + ", audio pitch = " + string(apitch) + ", audio location = " + string(alocation) + "\n");  
               prac_trial_list[ii][1]=vsize; 
               prac_trial_list[ii][2]=vbrightness;
               prac_trial_list[ii][3]=apitch;
               prac_trial_list[ii][4]=alocation;
               ii = ii + 1;
               repeate = repeate + 1;
            end;
            alocation = alocation + 1;
         end;
         apitch = apitch + 1;
      end;     
      vbrightness = vbrightness + 1;
   end;
   vsize = vsize + 1; 
end;    
*/
                 
# check practice trial list
/*
loop int i=1 until i > prac_trial_list.count()
begin 
   term.print(prac_trial_list[i][1]);
   term.print(prac_trial_list[i][2]); 
   term.print("\n");
   i=i+1;
end;
*/